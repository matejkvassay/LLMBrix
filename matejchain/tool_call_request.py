from pydantic import BaseModel
from typing import Optional
from matejchain.base import ApiCompatibleBase


class ToolCallRequest(BaseModel, ApiCompatibleBase):
    # ID of tool call generated by completions.
    id: str

    # Tool (function) name.
    name: str

    # Kwargs to be passed into tool.
    # Can be empty dict if no args specified by LLM.
    # Can be None if JSON parsing of args failed.
    kwargs: Optional[dict] = None

    # Error message, set only if parsing of JSON args fails with JSONDecodeError.
    error: Optional[str] = None

    def api_dict(self) -> dict:
        return {
            "id": self.id,
            "type": "function",
            "function": {
                "name": self.name,
                "arguments": self.kwargs if self.kwargs is not None else "{}",
            },
        }
